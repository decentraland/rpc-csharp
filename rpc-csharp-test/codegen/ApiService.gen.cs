// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: Proto
// file: api.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
namespace Proto {
public abstract class BookService<Context>
{
  public const string ServiceName = "BookService";

  public delegate UniTask<Book> GetBook(GetBookRequest request, Context context , CancellationToken ct);

  public delegate IUniTaskAsyncEnumerable<Book> QueryBooks(QueryBooksRequest request, Context context );
  
  public delegate UniTask<Book> ClientStream(IUniTaskAsyncEnumerable<QueryBooksRequest> request, Context context );
  
  public delegate IUniTaskAsyncEnumerable<Book> BidiStream(IUniTaskAsyncEnumerable<QueryBooksRequest> request, Context context );

  public static void RegisterService(RpcServerPort<Context> port, GetBook getBook, QueryBooks queryBooks, ClientStream clientStream, BidiStream bidiStream)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("GetBook", async (payload, context, ct) => { var res = await getBook(GetBookRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.serverStreamDefinition.Add("QueryBooks", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<Book>(queryBooks(QueryBooksRequest.Parser.ParseFrom(payload), context)); });
    result.clientStreamDefinition.Add("GetBook", async (IUniTaskAsyncEnumerable<ByteString> payload, Context context) => {
      return (await clientStream(
        ProtocolHelpers.DeserializeMessageEnumerator<QueryBooksRequest>(payload, s => QueryBooksRequest.Parser.ParseFrom(s)), context))?.ToByteString();
    });
    
    result.bidirectionalStreamDefinition.Add("BidiStream", (IUniTaskAsyncEnumerable<ByteString> payload, Context context) => {
      return ProtocolHelpers.SerializeMessageEnumerator<Book>(bidiStream(
        ProtocolHelpers.DeserializeMessageEnumerator<QueryBooksRequest>(payload, s => QueryBooksRequest.Parser.ParseFrom(s)), context));
    });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
